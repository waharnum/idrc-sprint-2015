(function () {
    "use strict";

    var data = [
        144.816000,
        143.209000,
        142.510000,
        142.037000,
        142.414000,
        142.326000,
        142.647000,
        142.208000,
        140.828000,
        142.534000,
        142.259000,
        142.108000,
        141.068000,
        141.229000,
        141.401000,
        141.596000,
        141.417000,
        139.775000,
        140.225000,
        140.898000,
        139.746000,
        139.254000,
        137.501000,
        136.600000,
        137.409000,
        137.307000,
        138.753000,
        139.570000,
        139.529000,
        139.335000,
        139.785000,
        139.353000,
        139.692000,
        140.824000,
        140.517000,
        140.300000,
        140.772000,
        140.779000,
        140.506000,
        140.097000,
        140.008000,
        139.715000,
        139.325000,
        140.470000,
        140.480000,
        142.841000,
        142.955000,
        143.283000,
        142.752000,
        142.865000,
        141.180000,
        140.841000,
        141.650000,
        141.319000,
        141.547000,
        141.078000,
        140.937000,
        141.476000,
        141.373000,
        140.645000,
        140.398000,
        141.659000,
        142.145000,
        142.981000,
        142.975000,
        142.567000,
        141.452000,
        141.657000,
        140.474000,
        141.270000,
        140.976000,
        140.718000,
        140.732000,
        140.757000,
        141.226000,
        141.464000,
        141.514000,
        141.538000,
        141.656000,
        141.683000,
        141.515000,
        141.455000,
        141.938000,
        141.753000,
        141.747000,
        141.891000,
        141.831000,
        141.718000,
        141.618000,
        141.748000,
        140.680000,
        140.099000,
        140.494000,
        140.130000,
        139.731000,
        139.252000,
        139.046000,
        139.139000,
        138.815000,
        138.746000,
        138.926000,
        138.829000,
        139.082000,
        139.041000,
        138.432000,
        138.442000,
        139.204000,
        139.697000,
        139.720000,
        139.905000,
        139.843000,
        139.349000,
        138.645000,
        138.100000,
        137.805000,
        138.208000,
        138.196000,
        138.368000,
        138.521000,
        138.710000,
        138.790000,
        138.659000,
        138.721000,
        138.823000,
        138.451000,
        138.371000,
        138.737000,
        138.868000,
        138.989000,
        139.095000,
        138.750000,
        138.570000,
        138.237000,
        138.638000,
        137.906000,
        137.872000,
        138.275000,
        137.950000,
        137.518000,
        136.841000,
        137.090000,
        137.108000,
        136.609000,
        136.619000,
        137.049000,
        136.712000,
        136.868000,
        136.915000,
        137.720000,
        137.627000,
        137.744000,
        137.646000,
        137.219000,
        136.635000,
        136.410000,
        137.001000,
        136.756000,
        136.688000,
        136.886000,
        136.911000,
        137.029000,
        137.051000,
        137.091000,
        137.557000,
        137.901000,
        137.597000,
        137.256000,
        137.031000,
        137.034000,
        136.711000,
        136.768000,
        136.985000,
        138.015000,
        137.778000,
        136.218000,
        136.072000,
        136.685000,
        137.394000,
        138.007000,
        138.363000,
        139.054000,
        138.706000,
        138.828000,
        139.317000,
        140.457000,
        139.926000,
        139.837000,
        139.911000,
        139.351000,
        138.620000,
        138.613000,
        138.890000,
        138.477000,
        137.420000,
        137.347000,
        137.272000,
        137.648000,
        136.851000,
        137.601000,
        136.845000,
        135.870000,
        136.211000,
        135.491000,
        135.931000,
        136.198000,
        136.691000,
        136.906000,
        136.043000,
        135.515000,
        136.912000,
        137.317000,
        136.904000,
        137.717000,
        137.563000,
        137.760000,
        142.305000,
        142.481000,
        143.140000,
        142.551000,
        142.645000,
        142.592000,
        144.403000,
        143.660000,
        144.414000,
        145.961000,
        145.197000,
        146.438000,
        148.034000,
        148.211000,
        145.703000,
        147.135000,
        147.156000,
        147.228000,
        146.770000,
        147.960000,
        147.605000,
        147.644000,
        147.451000,
        148.258000,
        149.364000,
        148.641000,
        148.059000,
        146.656000,
        147.246000,
        147.980000,
        146.515000,
        145.632000,
        146.448000,
        145.973000,
        146.116000,
        146.794000,
        146.887000,
        146.565000,
        146.605000,
        145.225000,
        0
    ];

    fluid.registerNamespace("oerSprint.synths");

    fluid.defaults("oerSprint.synths.rhythmicMeow", {
        gradeNames: ["flock.synth", "autoInit"],

        synthDef: {
            ugen: "flock.ugen.triggerBuffers",
            bufferIndex: 0,
            trigger: {
                ugen: "flock.ugen.impulse",
                freq: {
                    ugen: "flock.ugen.sequence",
                    freq: 1/2,
                    list: data,
                    add: -140
                }
            }
        }
    });

    fluid.defaults("oerSprint.synths.meowBand", {
        gradeNames: ["flock.band", "autoInit"],

        members: {
            rawData: data,
            data: "@expand:oerSprint.synths.makeDataBuffer(data, {that}.rawData)"
        },

        components: {
            loader: {
                type: "flock.bufferLoader",
                options: {
                    bufferDefs: [
                        {
                            id: "cute-meow",
                            url: "audio/cute-meow.wav"
                        },
                        {
                            id: "other-meow",
                            url: "audio/other-meow.wav"
                        },
                        {
                            id: "cranky-meow",
                            url: "audio/cranky-meow.wav"
                        }
                    ],

                    events: {
                        afterBuffersLoaded: "{meowBand}.events.afterBuffersLoaded"
                    }
                }
            },

            synth: {
                type: "oerSprint.synths.rhythmicMeow",
                createOnEvent: "afterBuffersLoaded",
                options: {
                    synthDef: {
                        options: {
                            bufferIDs: "@expand:oerSprint.synths.collectIDs({bufferLoader}.buffers)"
                        }
                    },
                    // listeners: {
                    //     onCreate: "oerSprint.synths.hackBuffer({band}.data, {that})"
                    // }
                }
            }
        },

        events: {
            afterBuffersLoaded: null
        },

        listeners: {
            afterBuffersLoaded: [
                {
                    "this": "console",
                    method: "log",
                    args: [
                        "HOLY MEOW!"
                    ]
                },
                "{that}.play()"
            ]
        }
    });

    oerSprint.synths.collectIDs = function (buffers) {
        return fluid.transform(buffers, function (buffer) {
            return buffer.id;
        });
    };

    oerSprint.synths.hackBuffer = function (buffer, synth) {
        var player = synth.get("dataPlayer");
        player.buffer = buffer;
        player.onBufferReady();
    };

    oerSprint.synths.makeDataBuffer = function (id, data) {
        var buffer = flock.bufferDesc({
            format: {
                numChannels: 1
            },
            data: {
                channels: data
            }
        });

        buffer.id = id;
        flock.enviro.shared.registerBuffer(buffer);

        return buffer;
    };
}());
